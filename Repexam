from abc import ABC, abstractmethod
class Empleado(ABC):
    def __init__(self,  rfc, apellido, nombre):
        self.__rfc = rfc
        self.__apellido = apellido
        self.__nombre = nombre
    @abstractmethod
    def mostrar_informacion(self):
        pass
    
class EmpleadoVendedor(Empleado):
    def __ini__(self, rfc, apellido, nombre, monto_vendido, tasa_comision):
        super().__init__(rfc, apellido, nombre)
        self.__monto_vendido = monto_vendido
        self.__tasa_comision = tasa_comision
        
    def calcular_ingresos(self):
            return self.monto_vendido * self.tasa_comision
    def calcular_bonificacion(self):
            ingreso = self.calcular_ingresos()
            if self.monto_vendido < 1000:
                return 0 
            elif 1000 <= self.monto_vendido <= 5000:
                return ingreso * .05
            else:
                return ingreso * .10
    def cacular_descuento(self):
        ingreso = self.calcular_ingresos()
        if ingreso < 1000:
            return 0 
        elif ingreso <= 5000:
            return ingreso * .05
        else:
            return ingreso * .10
        
class EmpleadoPermanente(Empleado):
    def __init__(self, rfc, apellido, nombre, sueldo_base, tasa_comision):
        super().__init__(rfc, apellido, nombre)
        self.__sueldo_base = sueldo_base
        self.__tasa_comision = tasa_comision
        
